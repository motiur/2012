#include <iostream>
#include <string>
#include <stdlib.h>
#include <stdio.h>
#include "graph.h"
using namespace std;

vertex::vertex()
{
	element = "";

	start_time = 0;

	end_time = 0;
	//numberofadjacentVertex= -1;

	//initial color is NILL
	color = 0;

	vertex * parent = NULL;


}


//Initializing graph () constructor
graph::graph()

{
	numVerticies = 0;

	maxVerticies = 50;

	for (int i = 0 ; i <= maxVerticies ; i++)
	{
		//marks[i] = false;//not visited ith vertex yet

		verticies[i] = NULL;

	}

	for(int i = 0 ; i < maxVerticies; i++)
	{
		for(int j = 0 ; j <maxVerticies; j++)
		{
			edges[i][j] = 10000; //distance from i to j

		}

	}

}


//Adding a vertex by incrementing the number of vertex

void graph::addVertex(vertex *v)
{
	
	verticies[numVerticies++]= v;

}


//Adding an edge between two nodes

void graph::addEdge(vertex *v , vertex *w , int d)
{
	int index_vertical = indexOf(v);
	
	int index_horizontal = indexOf(w);
	
	edges[index_vertical][index_horizontal] = d;

	


}


//It finds the index of a certain vertex

int graph::indexOf(vertex *v)
{


	for(int i = 0 ; i <numVerticies; i++)
	{
		//Comaparing the value of vertex to the verticies array

		if (verticies[i] == v)

			return i;

	}
	return -1;

}



//It finds the value of the edge between two nodes
/*
int graph::weightIs(vertex *v , vertex *w)
{
	int index_vertical = indexOf(v);

	int index_horizontal = indexOf(w);

	return edges[index_vertical][index_horizontal];

}

*/
//This function returns an array of vertex 
//which are agjacent to a given vertex


vertex **graph::arrayofadjacentVertex(vertex *v)
{
	int size = 0 ;
	
	int ind = indexOf(v);

	for(int i = 0 ; i<numVerticies ; i++)
	{

		/*
		//For undirected graphs this will be added

		if ((edges[ind][i]!= 10000)||(edges[i][ind]!= 10000))
		{
	
			size++;

		}*/
	
		
		
		//For directed graphs this will be added

		if (edges[ind][i]!= 10000)
		{
	
			size++;

		}
	

	}

	int *arr = new int[size];



	//arr is an array that contains
	//valid index values 
	for(int i = 0 , j = 0 ; i<numVerticies ; i++)
	{
		
		//for say: [5]->[6]->[7] :ind= [5]
		if(edges[ind][i]!= 10000)//ten thousand
		{

			arr[j] = i;//i is a valid index 

			j++;

		}
		
		/*		
		//This thing has been added due to undirected nature of the graph
		
		//for say:[4]->[5]: ind = [5] ; i has incremented
		
		if(edges[i][ind]!= 10000)//ten thousand
		{

			arr[j] = i;//i is a valid index 

			j++;

		}

		*/
	}


	//Constructing an array of vertex

	//Multiplying with the size variable
	//dynamically alloctes space for vertex array

	vertex **ver = new vertex *[size];

	for(int i = 0 ; i<size ; i++)
	{
		int ind = arr[i];
		
		ver[i] = verticies[ind];

	}

	

	return ver;


}

int graph::getsizeofadjVerticies(vertex *v)
{

	int size = 0 ;
	
	int ind = indexOf(v);

	/*
	This will be added for undirected graphs 
	
	for(int i = 0 ; i<numVerticies ; i++)
	{
		if ((edges[ind][i]!= 10000)||(edges[i][ind]!= 10000))
		{
			//cout<<"egde["<<ind<<"]i["<<i<<"]"<<edges[ind][i]<<endl;
			size++;

		}

	}*/

	
	//This will be added for directed graphs 
	

	//Checking if a certain edge has been modified from 
	//previous instance

	for(int i = 0 ; i<numVerticies ; i++)
	{
		if (edges[ind][i]!= 10000)
		{
			//cout<<"egde["<<ind<<"]i["<<i<<"]"<<edges[ind][i]<<endl;
			size++;

		}

	}



	return size;


}

//Marking that a certain vertex has been visited
/*
void graph::markVertex(vertex *v)
{

	int index = indexOf(v);

	marks[index] = true;

}


//Checking whether a certain vertex has been visited

bool graph::isMarked(vertex *v)
{
	int index = indexOf(v);

	return marks[index];

}


//Clearing all the marks

void graph::clearMarks()
{
	for(int i = 0;i <maxVerticies ; i++)
	{

		marks[i] = false;

	}

}

*/
//Getting a vertex node using string variable

vertex * graph::getVertex(string g)
{

	for(int i = 0 ; i<numVerticies; i++)
	{
		vertex *v = verticies[i];

		if ( v->element.compare(g) == 0)

			{
				return v;

			}


	}

}


//Converting a string to an integer

int getInteger(string g)
{
	int siz=g.length();

	int x =0;

	for(int i=0; i<siz; i++)

	{

		int val=g[i]-'0';

		x*=10;

		x+=val;
	}

	return x;
}
